// Logger para o frontend - vers√£o simplificada
export class ClientLogger {
  private static isDevelopment = import.meta.env.DEV;

  static info(message: string, data?: any): void {
    if (this.isDevelopment) {
      console.log(`‚ÑπÔ∏è [${new Date().toISOString()}] ${message}`, data || '');
    }
  }

  static success(message: string, data?: any): void {
    if (this.isDevelopment) {
      console.log(`‚úÖ [${new Date().toISOString()}] ${message}`, data || '');
    }
  }

  static error(message: string, error?: any): void {
    console.error(`‚ùå [${new Date().toISOString()}] ${message}`, error || '');
  }

  static warn(message: string, data?: any): void {
    console.warn(`‚ö†Ô∏è [${new Date().toISOString()}] ${message}`, data || '');
  }

  static debug(message: string, data?: any): void {
    if (this.isDevelopment) {
      console.debug(`üêõ [${new Date().toISOString()}] ${message}`, data || '');
    }
  }

  // M√©todo para a√ß√µes do usu√°rio (sempre ativo para analytics)
  static userAction(action: string, data?: any): void {
    console.log(`üë§ [${new Date().toISOString()}] A√ß√£o do usu√°rio: ${action}`, data || '');
    
    // Aqui voc√™ pode enviar para analytics (Google Analytics, Mixpanel, etc.)
    // analytics.track(action, data);
  }
}